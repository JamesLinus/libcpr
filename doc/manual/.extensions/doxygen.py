# -*- coding: utf-8 -*-
#
# Sphinx extension for parsing XML files generated by Doxygen.
#
# Written by Arto Bendiken <http://ar.to/>.
#
# This is free and unencumbered software released into the public domain.

#from lxml import etree as ElementTree
from xml.etree import cElementTree as ElementTree

__index__ = None

def index():
  global __index__
  if __index__ is None:
    __index__ = DoxygenIndex()
  return __index__

class DoxygenIndex(object):
  def __init__(self):
    tree = ElementTree.parse('../doxygen/xml/index.xml')
    self.symbols = {}
    for compound in tree.findall('compound'):
      compound_refid = compound.get('refid')
      for member in compound.findall('member'):
        member_refid = member.get('refid')
        member_name = member.find('name').text
        self.symbols[member_name] = (compound_refid, member_refid)
    # TODO: handle duplicate names?

  def lookup(self, symbol):
    compound_refid, member_refid = self.symbols[symbol]
    tree = ElementTree.parse('../doxygen/xml/%s.xml' % (compound_refid))
    for memberdef in tree.findall(".//sectiondef/memberdef[@id='%s']" % (member_refid)):
      return DoxygenMemberDef(memberdef)
    return None

class DoxygenMemberDef(object):
  BASIC_TAGS = ['definition', 'argsstring', 'name']
  OTHER_TAGS = ['type', 'briefdescription']
  PARAM_TAGS = ['type', 'declname']

  def __init__(self, tree):
    ElementTree.dump(tree)

    # Extract the attributes:
    for (attr_name, attr_value) in tree.items():
      self.__dict__[attr_name] = attr_value

    # Parse the basic tags:
    for node_name in self.BASIC_TAGS:
      self.__dict__[node_name] = tree.findtext(node_name)

    # Parse the parameter list:
    self.params = []
    if self.argsstring != '(void)':
      for param_node in tree.findall('param'):
        param = {}
        for node_name in self.PARAM_TAGS:
          param[node_name] = param_node.findtext(node_name)
        if 'type' in param:
          self.params.append(param)

    # Parse description tags:
    for node_name in self.OTHER_TAGS:
      self.__dict__[node_name] = self.extract_text(tree.find(node_name))

    # Parse the <location> tag:
    # TODO

  def extract_text(self, root):
    buffer = []
    for text in self.collect_text(root):
      buffer.append(text)
    return ''.join(buffer).strip()

  def collect_text(self, root):
    if root is not None:
      if root.text is not None:
        yield root.text
      for node in root:
        for text in self.collect_text(node):
          yield text
      if root.tail is not None:
        yield root.tail

  def __str__(self):
    return "<class %s %r>" % (type(self).__name__, self.__dict__)

def setup(app):
  app.require_sphinx('1.0')

if __name__ == '__main__':
  #node = DoxygenIndex().lookup('cpr_feature_exists')
  node = DoxygenIndex().lookup('cpr_vector_alloc')
  print node
